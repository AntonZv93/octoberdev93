Устанавливаем Ansible, если версия ниже 2.2 обновляем:

добавляем в /etc/apt/sources.list репозиторий 
deb http://ppa.launchpad.net/ansible/ansible/ubuntu xenial main
Добавляем ключ:
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
и устанавливаем: 
sudo apt-get update 
sudo apt-get install ansible
Вносим изменения в конфигурационный файл /etc/ansible/ansible.cfg:
Раскомментируем  строку host_key_checking = False . Это необходимо для того, что бы при удалении и повторном создании виртуальной машины игнорировать ошибку изменения ключа.
также активируем строку nocows = 1, этот параметр необязателен, если вам нравится изображение веселой коровы, то игнорируем его.

Переходим к созданию проекта. 
Для чего переходим по адресу - https://console.cloud.google.com/projectselector/compute/instances.
 Я назвал проект octoberdev93, т.к. в будущем именно october будет развернут в виртуальной машине.
После создания, нам понадобится идентификатор проекта
Переходим по ссылке htps://console.cloud.google.com/iam-admin/serviceaccounts/ 
--- выбираем аккаунт, либо создаем новый для нашего проекта и сохраняем ключ (тип JSON) 
Последнее что нам необходимо - это сгенерировать SSH ключ:
ssh-keygen -t rsa -f ~/.ssh/[KEY_FILE_NAME] -C [USERNAME] , где для [KEY_FILE_NAME] и [USERNAME] указываем свои значения.
После чего загружаем наш новый публичный ключ по адресу https://console.cloud.google.com/compute/metadata/sshKeys
Должны быть прописанны настройки инвентори (hosts) :hosts.txt ,а также ansible.cfg где лежит путь до файла инвентори и путь до .ssh директории
На этом этапе завершаем работу с Google Cloud и переходим к Ansible

Устанавливаем необходимые зависимости:
sudo apt-get install -y build-essential git python-dev python-pip
Устанавливаем libcloud:
sudo pip install apache-libcloud==0.20.1
Описание модуля можно посмотреть здесь - http://docs.ansible.com/ansible/list_of_cloud_modules.html#google
Переходим к настройке ansible playbook: 
Я создал директорию /etc/ansible/gce куда поместил JSON ключ проекта
Все последующие файлы будут находится в этой директории. Создаем файл /etc/ansible/gce/var
 в котором прописываем необходимые переменные  :
service_account_email:
credentials_file: /etc/ansible/gce/
project_id: 
machine_type: f1-micro
image: debian-8
Cоздаем файл playbook /etc/ansible/gce/on_ansible_master.yml
С помощью этого скрипта мы копируем гит на хост где находится ansible и оттуда мы можем продолжить перейдя в скопированную папку и выполнив следующую комманду:
ansible-playbook /etc/ansible/gce/on_ansible_master.yml -i hosts
Для запуска следующего сценария выполняем команду:
ansible-playbook /home/create.yml --extra-vars "domain=yourdns" --user= --private-key=~/.ssh/user
С помощью этого playbook создаем новую виртуальную машину, правила разрешающие доступ к портам 80,443 и Cloud DNS с A-записью,
 в переменной domain передаем нашему сценарию домен который будет создан.
 Ниже привожу сценарий для удаления созданной нами машины - 
ansible-playbook /home/destroy.yml



Часть 2:
Взаимодействие с google cloud я описал в первой части статьи, в этой части рассмотрю работу c ansible,
 в качестве примера развернем LEMP (Linux, Apache2, MySQL, PHP) и установим October:

  
Я добавил роли (задачи) которые выполнятся в файле octoberdev93.yml после клонирования репозитория git 
на только что созданную виртуальную машину-чтобы это выполнить вводим комманду из файла README.md
.


Теперь можно запустить мастер установки перейдя по пути http://your_ip_or_domain/install.php и следовать инструкциям


